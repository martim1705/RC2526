# Compilador e flags
CC      := gcc
CFLAGS  := -Wall -Wextra -O2 -std=c11 -Iheaders -Imacros -MMD -MP
LDFLAGS :=
LIBS    :=

# ——— Programa principal ———
SOURCES := \
  src/project.c \
  src/cable.c \
  src/setMachine.c \
  src/read/read_noncanonical.c \
  src/write/write_noncanonical.c

OBJECTS := $(SOURCES:.c=.o)
EXE     := project

# ——— Exemplo (alarm) ———
EXAMPLES_SRC := examples/alarm/alarm_sigaction.c
EXAMPLES_OBJ := $(EXAMPLES_SRC:.c=.o)
EXAMPLES     := alarm_sigaction

# Dependências geradas (-MMD -MP)
DEPS := $(OBJECTS:.o=.d) $(EXAMPLES_OBJ:.o=.d)

.PHONY: all default clean run
default: all
all: $(EXE) $(EXAMPLES)

# Link do programa principal
$(EXE): $(OBJECTS)
	$(CC) $(LDFLAGS) $^ -o $@ $(LIBS)

# Link do exemplo
$(EXAMPLES): $(EXAMPLES_OBJ)
	$(CC) $(LDFLAGS) $^ -o $@ $(LIBS)

# Regra genérica de compilação
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# Executar: make run PROG=project  (ou PROG=alarm_sigaction)
run:
	@if [ -z "$(PROG)" ]; then \
		echo "Uso: make run PROG=project   (ou PROG=alarm_sigaction)"; \
		exit 1; \
	fi
	./$(PROG)

# Limpar
clean:
	- rm -f $(EXE) $(EXAMPLES) $(OBJECTS) $(EXAMPLES_OBJ) $(DEPS)

# Incluir dependências de headers, se existirem
-include $(DEPS)
